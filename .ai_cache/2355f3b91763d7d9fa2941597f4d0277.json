{
  "summary": "该文章讨论如何高效实现计算x的n次幂（Pow(x, n)）的算法。核心在于通过快速幂算法（二分法）将时间复杂度从O(n)优化至O(log n)，利用幂的二进制分解和分治思想减少乘法次数。重点处理负数指数和边界条件，适用于大数计算场景。算法在LeetCode等编程挑战中常见，是理解递归和位运算的典型例题。",
  "service": "deepseek",
  "page_title": "[50. Pow(x, n)](https://leetcode.cn/problems/powx-n/)",
  "timestamp": "2025-07-20T17:36:37.954045",
  "language": "zh"
}