{
  "summary": "该文探讨快速幂算法实现pow(x,n)函数，用于高效计算x的n次方。通过分治策略将时间复杂度优化至O(log n)，解决了直接连乘法的效率问题。重点处理了指数为负数时的倒数转换，以及利用递归或迭代实现二进制分解降低计算次数。适用于大数幂运算场景，是算法竞赛和工程中的经典优化案例。",
  "service": "deepseek",
  "page_title": "[50. Pow(x, n)](https://leetcode.cn/problems/powx-n/)",
  "timestamp": "2025-09-12T17:50:17.831138",
  "language": "zh"
}